import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from supabase import create_client
import asyncio
import httpx
from datetime import datetime

# --- –ö–æ–Ω—Ñ–∏–≥ ---
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_URL = "https://api.deepseek.com/v1/chat/completions"

async def extract_event_data(text: str) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ DeepSeek –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å event_title, event_description, start_datetime, end_datetime
    """
    today = datetime.now().strftime('%Y-%m-%d')
    prompt = f"""
    –ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏.
    –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
    {{
      "event_title": "—Å—Ç—Ä–æ–∫–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞",
      "event_description": "—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null",
      "start_datetime": "—Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM –∏–ª–∏ null",
      "end_datetime": "—Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM –∏–ª–∏ null",
      "event_place": "—Å—Ç—Ä–æ–∫–∞ (–∞–¥—Ä–µ—Å, –∫–∞—Ñ–µ, Zoom –∏ —Ç.–ø.) –∏–ª–∏ null"
    }}

    –ï—Å–ª–∏ –¥–∞—Ç–∞/–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω—ã –Ω–µ—è–≤–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞', '–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'), —Ä–∞—Å—Å—á–∏—Ç–∞–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {today}.
    –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –æ—Å—Ç–∞–≤—å –∫–∞–∫ null.
    –ï—Å–ª–∏ –º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî event_place = null.

    –°–æ–æ–±—â–µ–Ω–∏–µ:
    {text}
    """

    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "deepseek-chat",
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "response_format": {"type": "json_object"},
        "temperature": 0.1
    }

    async with httpx.AsyncClient(timeout=15.0) as client:
        try:
            response = await client.post(DEEPSEEK_URL, json=payload, headers=headers)
            response.raise_for_status()
            data = response.json()

            content = data["choices"][0]["message"]["content"]
            import json
            parsed = json.loads(content)

            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –µ—Å—Ç—å
            result = {
                "event_title": parsed.get("event_title"),
                "event_description": parsed.get("event_description"),
                "start_datetime": parsed.get("start_datetime"),
                "end_datetime": parsed.get("end_datetime"),
                "event_place": parsed.get("event_place")  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
            }

            return result

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek: {e}")
            return {
                "event_title": None,
                "event_description": None,
                "start_datetime": None,
                "end_datetime": None,
                "event_place": None
            }


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
supabase_client = create_client(SUPABASE_URL, SUPABASE_KEY)

@dp.message(F.text)
async def handle_free_text(message: Message):
    if message.text.startswith("/"):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

    await message.reply("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–±—ã—Ç–∏–µ...")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DeepSeek
    extracted = await extract_event_data(message.text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
    if not extracted["event_title"]:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.")
        return

    if not extracted["start_datetime"]:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_res = supabase_client.table("users") \
            .select("id") \
            .eq("telegram_id", str(message.from_user.id)) \
            .execute()

        if user_res.data:
            user_id = user_res.data[0]["id"]
        else:
            new_user = supabase_client.table("users") \
                .insert({"telegram_id": str(message.from_user.id)}) \
                .execute()
            user_id = new_user.data[0]["id"]

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event_data = {
            "user_id": user_id,
            "event_title": extracted["event_title"],
            "event_description": extracted["event_description"],
            "start_datetime": extracted["start_datetime"],
            "end_datetime": extracted["end_datetime"],
            "event_place": extracted["event_place"],
            "event_weekly": False
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        supabase_client.table("events").insert(event_data).execute()
        await message.reply(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n\n"
                       f"**{extracted['event_title']}**\n"
                       f"üïê {extracted['start_datetime']}\n"
                       f"{'üìç ' + extracted['event_place'] if extracted['event_place'] else ''}\n"
                       f"{'üìù ' + extracted['event_description'] if extracted['event_description'] else ''}")

    except Exception as e:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É.")
        print(f"–û—à–∏–±–∫–∞: {e}")





# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":

    asyncio.run(main())
