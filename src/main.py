from dotenv import load_dotenv
load_dotenv()

import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from supabase import create_client
import asyncio
import httpx
from datetime import datetime
import json

# --- –ö–æ–Ω—Ñ–∏–≥ ---
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
DEEPSEEK_URL = "https://api.deepseek.com/v1/chat/completions"  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã —É–¥–∞–ª–µ–Ω—ã

# --- –ö–ª–∏–µ–Ω—Ç Supabase ---
supabase_client = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ---
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")],
        [KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è")],
        [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")]  # ‚Üê –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
confirm_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# --- FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class EventForm(StatesGroup):
    waiting_for_event = State()
    waiting_for_period = State()
    waiting_for_delete = State()
    confirming_delete = State()
    waiting_for_edit = State()
    confirming_edit = State()

# --- –§—É–Ω–∫—Ü–∏—è: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏–∏ ---
async def extract_event_data(text: str) -> dict:
    today = datetime.now().strftime('%Y-%m-%d')
    prompt = f"""
    –ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏.
    –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
    {{
      "event_title": "—Å—Ç—Ä–æ–∫–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞",
      "event_description": "—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null",
      "start_datetime": "—Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM –∏–ª–∏ null",
      "end_datetime": "—Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM –∏–ª–∏ null",
      "event_place": "—Å—Ç—Ä–æ–∫–∞ (–∞–¥—Ä–µ—Å, –∫–∞—Ñ–µ, Zoom –∏ —Ç.–ø.) –∏–ª–∏ null"
    }}

    –ï—Å–ª–∏ –¥–∞—Ç–∞/–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω—ã –Ω–µ—è–≤–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞', '–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'), —Ä–∞—Å—Å—á–∏—Ç–∞–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {today}.
    –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –æ—Å—Ç–∞–≤—å –∫–∞–∫ null.
    –ï—Å–ª–∏ –º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî event_place = null.

    –°–æ–æ–±—â–µ–Ω–∏–µ:
    {text}
    """

    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "response_format": {"type": "json_object"},
        "temperature": 0.1
    }

    async with httpx.AsyncClient(timeout=15.0) as client:
        try:
            response = await client.post(DEEPSEEK_URL, json=payload, headers=headers)
            response.raise_for_status()
            data = response.json()

            content = data["choices"][0]["message"]["content"]
            parsed = json.loads(content)

            return {
                "event_title": parsed.get("event_title"),
                "event_description": parsed.get("event_description"),
                "start_datetime": parsed.get("start_datetime"),
                "end_datetime": parsed.get("end_datetime"),
                "event_place": parsed.get("event_place")
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek: {e}")
            return {
                "event_title": None,
                "event_description": None,
                "start_datetime": None,
                "end_datetime": None,
                "event_place": None
            }


# --- –§—É–Ω–∫—Ü–∏—è: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ (–¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–±—ã—Ç–∏–π) ---
async def extract_date_range(text: str) -> dict:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    {
        "start_date": "YYYY-MM-DD",
        "end_date": "YYYY-MM-DD",
        "start_time": "HH:MM",   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        "end_time": "HH:MM",     # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        "exact_time": "HH:MM"    # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ–¥–Ω–æ –≤—Ä–µ–º—è
    }
    """
    today = datetime.now().strftime('%Y-%m-%d')
    prompt = f"""
    –û–ø—Ä–µ–¥–µ–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏/–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    {{
      "start_date": "YYYY-MM-DD –∏–ª–∏ null",
      "end_date": "YYYY-MM-DD –∏–ª–∏ null",
      "start_time": "HH:MM –∏–ª–∏ null",
      "end_time": "HH:MM –∏–ª–∏ null",
      "exact_time": "HH:MM –∏–ª–∏ null"
    }}
    –°–µ–≥–æ–¥–Ω—è: {today}

    –ü—Ä–∏–º–µ—Ä—ã:
    - "–Ω–∞ 14 —Å–µ–Ω—Ç—è–±—Ä—è –≤ 18:00" ‚Üí start_date=14-09, exact_time=18:00
    - "–ø–æ—Å–ª–µ 18:00 —Å–µ–≥–æ–¥–Ω—è" ‚Üí start_date=today, start_time=18:00
    - "–¥–æ 12:00 –∑–∞–≤—Ç—Ä–∞" ‚Üí end_date=tomorrow, end_time=12:00
    - "–≤–µ—á–µ—Ä–æ–º –≤ –ø—è—Ç–Ω–∏—Ü—É" ‚Üí start_date=friday, start_time="18:00", end_time="22:00"

    –°–æ–æ–±—â–µ–Ω–∏–µ:
    {text}
    """

    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "response_format": {"type": "json_object"},
        "temperature": 0.1
    }

    async with httpx.AsyncClient(timeout=15.0) as client:
        try:
            response = await client.post(DEEPSEEK_URL, json=payload, headers=headers)
            response.raise_for_status()
            data = response.json()

            content = data["choices"][0]["message"]["content"]
            parsed = json.loads(content)

            return {
                "start_date": parsed.get("start_date"),
                "end_date": parsed.get("end_date"),
                "start_time": parsed.get("start_time"),
                "end_time": parsed.get("end_time"),
                "exact_time": parsed.get("exact_time")
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
            return {
                "start_date": None,
                "end_date": None,
                "start_time": None,
                "end_time": None,
                "exact_time": None
            }

# --- –§—É–Ω–∫—Ü–∏—è: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ---
async def extract_event_to_delete(text: str) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    {
        "event_title": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ null",
        "start_date": "YYYY-MM-DD",
        "exact_time": "HH:MM"
    }
    """
    today = datetime.now().strftime('%Y-%m-%d')
    prompt = f"""
    –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
    –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    {{
      "event_title": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ null",
      "start_date": "YYYY-MM-DD",
      "exact_time": "HH:MM"
    }}
    –°–µ–≥–æ–¥–Ω—è: {today}

    –ü—Ä–∏–º–µ—Ä—ã:
    - "—É–¥–∞–ª–∏ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ 12:00" ‚Üí start_date=–∑–∞–≤—Ç—Ä–∞, exact_time="12:00", event_title=null
    - "–≤—Å—Ç—Ä–µ—á—É —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ 18:00" ‚Üí event_title="–≤—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π", exact_time="18:00"
    - "–Ω–∞ 14 —Å–µ–Ω—Ç—è–±—Ä—è –≤ 10:30" ‚Üí start_date="2025-09-14", exact_time="10:30"

    –°–æ–æ–±—â–µ–Ω–∏–µ:
    {text}
    """

    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "response_format": {"type": "json_object"},
        "temperature": 0.1
    }

    async with httpx.AsyncClient(timeout=15.0) as client:
        try:
            response = await client.post(DEEPSEEK_URL, json=payload, headers=headers)
            response.raise_for_status()
            data = response.json()

            content = data["choices"][0]["message"]["content"]
            parsed = json.loads(content)

            return {
                "event_title": parsed.get("event_title"),
                "start_date": parsed.get("start_date"),
                "exact_time": parsed.get("exact_time")
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return {"event_title": None, "start_date": None, "exact_time": None}

# --- –§—É–Ω–∫—Ü–∏—è: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ---
async def extract_edit_data(text: str) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å.
    start_datetime –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO: YYYY-MM-DDTHH:MM:SS
    """
    today = datetime.now().strftime('%Y-%m-%d')
    prompt = f"""
    –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ø–æ–ª—è —Å–æ–±—ã—Ç–∏—è –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.
    –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON —Å –ü–û–õ–Ø–ú–ò, –ö–û–¢–û–†–´–ï –ú–ï–ù–Ø–Æ–¢–°–Ø:
    {{
      "event_title": "–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ null",
      "event_description": "–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ null",
      "start_datetime": "–Ω–æ–≤–∞—è –¥–∞—Ç–∞-–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DDTHH:MM:SS –∏–ª–∏ null",
      "end_datetime": "–Ω–æ–≤–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DDTHH:MM:SS –∏–ª–∏ null",
      "event_place": "–Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –∏–ª–∏ null"
    }}

    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 19:00", —Ç–æ:
    start_datetime = "2025-09-15T19:00:00"

    –°–µ–≥–æ–¥–Ω—è: {today}

    –°–æ–æ–±—â–µ–Ω–∏–µ:
    {text}
    """

    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "response_format": {"type": "json_object"},
        "temperature": 0.1
    }

    async with httpx.AsyncClient(timeout=15.0) as client:
        try:
            response = await client.post(DEEPSEEK_URL, json=payload, headers=headers)
            response.raise_for_status()
            data = response.json()

            content = data["choices"][0]["message"]["content"]
            parsed = json.loads(content)

            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            def validate_dt(dt_str):
                if not dt_str or len(dt_str) < 16:
                    return None
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YYYY-MM-DDTHH:MM:SS
                import re
                if re.match(r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$", dt_str):
                    return dt_str
                return None

            return {
                "event_title": parsed.get("event_title"),
                "event_description": parsed.get("event_description"),
                "start_datetime": validate_dt(parsed.get("start_datetime")),
                "end_datetime": validate_dt(parsed.get("end_datetime")),
                "event_place": parsed.get("event_place")
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {
                "event_title": None,
                "event_description": None,
                "start_datetime": None,
                "end_datetime": None,
                "event_place": None
            }


# --- –•–µ–Ω–¥–ª–µ—Ä: —Å—Ç–∞—Ä—Ç –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    # –£–±–∏—Ä–∞–µ–º –ª—é–±—É—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>—É–º–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏</b>.\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        parse_mode="HTML",
        reply_markup=main_menu  # —Ç–≤–æ—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    )


# --- –•–µ–Ω–¥–ª–µ—Ä: "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ" ---
@dp.message(F.text == "üìÖ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def add_event_handler(message: Message, state: FSMContext):
    await state.set_state(EventForm.waiting_for_event)
    await message.answer("–ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:", reply_markup=None)


# --- –•–µ–Ω–¥–ª–µ—Ä: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è" ---
@dp.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è")
async def view_events_handler(message: Message, state: FSMContext):
    await state.set_state(EventForm.waiting_for_period)
    await message.answer("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∏–ª–∏ –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è?", reply_markup=None)


# --- –•–µ–Ω–¥–ª–µ—Ä: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
@dp.message(EventForm.waiting_for_event, F.text)
async def handle_new_event(message: Message, state: FSMContext):
    await message.reply("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–±—ã—Ç–∏–µ...")

    extracted = await extract_event_data(message.text)

    if not extracted["event_title"]:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.")
        return

    if not extracted["start_datetime"]:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_res = supabase_client.table("users") \
            .select("id") \
            .eq("telegram_id", str(message.from_user.id)) \
            .execute()

        user_id = user_res.data[0]["id"] if user_res.data else None

        if not user_id:
            new_user = supabase_client.table("users") \
                .insert({"telegram_id": str(message.from_user.id)}) \
                .execute()
            user_id = new_user.data[0]["id"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        event_data = {
            "user_id": user_id,
            "event_title": extracted["event_title"],
            "event_description": extracted["event_description"],
            "start_datetime": extracted["start_datetime"],
            "end_datetime": extracted["end_datetime"],
            "event_place": extracted["event_place"],
            "event_weekly": False
        }

        supabase_client.table("events").insert(event_data).execute()

        await message.reply(
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n\n"
            f"<b>{extracted['event_title']}</b>\n"
            f"üïê {extracted['start_datetime']}\n"
            f"{'üìç ' + extracted['event_place'] if extracted['event_place'] else ''}\n"
            f"{'üìù ' + extracted['event_description'] if extracted['event_description'] else ''}",
            parse_mode="HTML"
        )

    except Exception as e:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É.")
        print(f"–û—à–∏–±–∫–∞: {e}")

    await state.clear()
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)


# --- –•–µ–Ω–¥–ª–µ—Ä: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π ---
@dp.message(EventForm.waiting_for_period, F.text)
async def handle_view_events(message: Message, state: FSMContext):
    await message.reply("üîç –û–ø—Ä–µ–¥–µ–ª—è—é –ø–µ—Ä–∏–æ–¥ –∏ –≤—Ä–µ–º—è...")

    range_data = await extract_date_range(message.text)

    if not range_data["start_date"] and not range_data["end_date"]:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É.")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    start_date = range_data["start_date"] or range_data["end_date"]
    end_date = range_data["end_date"] or range_data["start_date"]

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_res = supabase_client.table("users") \
            .select("id") \
            .eq("telegram_id", str(message.from_user.id)) \
            .execute()

        if not user_res:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = user_res.data[0]["id"]

        # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        query = supabase_client.table("events") \
            .select("*") \
            .eq("user_id", user_id) \
            .gte("start_datetime", f"{start_date}T00:00:00") \
            .lte("start_datetime", f"{end_date}T23:59:59")

        # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if range_data["exact_time"]:
            # –¢–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
            query = query.eq("start_datetime", f"{start_date}T{range_data['exact_time']}:00")

        else:
            # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
            if range_data["start_time"]:
                time_str = f"{start_date}T{range_data['start_time']}:00"
                query = query.gte("start_datetime", time_str)

            if range_data["end_time"]:
                time_str = f"{end_date}T{range_data['end_time']}:00"
                query = query.lte("start_datetime", time_str)

        events_res = query.order("start_datetime").execute()

        if not events_res:
            await message.reply(f"–ù–∞ {start_date} –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            response = f"üìÖ –°–æ–±—ã—Ç–∏—è "
            if range_data["exact_time"]:
                response += f"–Ω–∞ {start_date} –≤ {range_data['exact_time']}:\n\n"
            elif range_data["start_time"] and not range_data["end_time"]:
                response += f"–ø–æ—Å–ª–µ {range_data['start_time']} –Ω–∞ {start_date}:\n\n"
            elif range_data["end_time"] and not range_data["start_time"]:
                response += f"–¥–æ {range_data['end_time']} –Ω–∞ {start_date}:\n\n"
            else:
                response += f"—Å {start_date} –ø–æ {end_date}:\n\n"

            for ev in events_res.data:
                title = ev["event_title"]

                if ev["start_datetime"]:
                    dt = ev["start_datetime"]
                    date_part = dt.split("T")[0]
                    time_part = dt.split("T")[1][:5]
                    try:
                        from datetime import datetime as dt_module
                        parsed = dt_module.fromisoformat(date_part)
                        formatted_date = parsed.strftime("%d.%m.%Y")
                        datetime_display = f"{formatted_date} {time_part}"
                    except:
                        datetime_display = f"{date_part} {time_part}"
                else:
                    datetime_display = "??.??.???? ??:??"

                place = f"\nüìç {ev['event_place']}" if ev["event_place"] else ""
                desc = f"\nüìù {ev['event_description']}" if ev["event_description"] else ""

                response += (
                    f"‚Ä¢ <b>{title}</b> ‚Äî {datetime_display}{place}{desc}\n\n"
                )

            await message.reply(response.strip(), parse_mode="HTML")

    except Exception as e:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π.")
        print(f"–û—à–∏–±–∫–∞: {e}")

    await state.clear()
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)

# --- –•–µ–Ω–¥–ª–µ—Ä: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---
@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def delete_event_handler(message: Message, state: FSMContext):
    await state.set_state(EventForm.waiting_for_delete)
    await message.answer(
        "–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å?\n"
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏ –¥–∞—Ç—É.",
        reply_markup=None
    )

# --- –•–µ–Ω–¥–ª–µ—Ä: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ ---
@dp.message(EventForm.waiting_for_delete, F.text)
async def handle_delete_event(message: Message, state: FSMContext):
    await message.reply("üîç –ò—â—É —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    deletion_data = await extract_event_to_delete(message.text)

    if not deletion_data["start_date"]:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è.")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_res = supabase_client.table("users") \
            .select("id") \
            .eq("telegram_id", str(message.from_user.id)) \
            .execute()

        if not user_res:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = user_res.data[0]["id"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        query = supabase_client.table("events") \
            .select("*") \
            .eq("user_id", user_id) \
            .gte("start_datetime", f"{deletion_data['start_date']}T00:00:00") \
            .lte("start_datetime", f"{deletion_data['start_date']}T23:59:59")

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
        if deletion_data["exact_time"]:
            target_time = f"{deletion_data['start_date']}T{deletion_data['exact_time']}:00"
            query = query.eq("start_datetime", target_time)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–µ–º—É
        if deletion_data["event_title"]:
            query = query.ilike("event_title", f"%{deletion_data['event_title']}%")

        events_res = query.execute()

        if not events_res:
            await message.reply(f"‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–∞ {deletion_data['start_date']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏–π
        found_events = events_res.data
        event_ids = [ev["id"] for ev in found_events]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        first_ev = found_events[0]
        title = first_ev["event_title"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        if first_ev["start_datetime"]:
            dt = first_ev["start_datetime"]
            date_part = dt.split("T")[0]
            time_part = dt.split("T")[1][:5]
            try:
                from datetime import datetime as dt_module
                parsed = dt_module.fromisoformat(date_part)
                formatted_date = parsed.strftime("%d.%m.%Y")
                datetime_str = f"{formatted_date} {time_part}"
            except:
                datetime_str = f"{date_part} {time_part}"
        else:
            datetime_str = "??.??.???? ??:??"

        place = f"\nüìç {first_ev['event_place']}" if first_ev['event_place'] else ""
        desc = f"\nüìù {first_ev['event_description']}" if first_ev['event_description'] else ""

        confirmation_msg = (
            f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:\n\n"
            f"‚Ä¢ <b>{title}</b> ‚Äî {datetime_str}{place}{desc}\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å?"
        )
        await message.reply(confirmation_msg, parse_mode="HTML", reply_markup=confirm_kb)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(event_ids_to_delete=event_ids)
        await state.set_state(EventForm.confirming_delete)

    except Exception as e:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏—è.")
        print(f"–û—à–∏–±–∫–∞: {e}")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)

# --- –•–µ–Ω–¥–ª–µ—Ä: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ---
@dp.message(EventForm.confirming_delete, F.text)
async def confirm_delete(message: Message, state: FSMContext):
    if message.text == "‚ùå –ù–µ—Ç":
        await message.reply("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        await state.clear()
        return

    elif message.text == "‚úÖ –î–∞":
        data = await state.get_data()
        event_ids = data.get("event_ids_to_delete", [])

        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
            supabase_client.table("events").delete().in_("id", event_ids).execute()
            count = len(event_ids)
            s = "—Å–æ–±—ã—Ç–∏–µ" if count == 1 else "—Å–æ–±—ã—Ç–∏—è"
            await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {count} {s}.", reply_markup=main_menu)
        except Exception as e:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
            print(f"–û—à–∏–±–∫–∞: {e}")

        await state.clear()
        return

    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç")

# --- –•–µ–Ω–¥–ª–µ—Ä: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---
@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def edit_event_handler(message: Message, state: FSMContext):
    await state.set_state(EventForm.waiting_for_edit)
    await message.answer(
        "–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å–∏ –≤—Å—Ç—Ä–µ—á—É —Å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 19:00\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ '–î–µ–º–æ –ø—Ä–æ–¥—É–∫—Ç–∞'\n"
        "‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å–∏ —Å–æ–∑–≤–æ–Ω –≤ Zoom",
        reply_markup=None
    )

# --- –•–µ–Ω–¥–ª–µ—Ä: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ---
@dp.message(EventForm.waiting_for_edit, F.text)
async def handle_edit_event(message: Message, state: FSMContext):
    await message.reply("üîç –ò—â—É —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è...")

    # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á—å, –ß–¢–û –º–µ–Ω—è—Ç—å
    changes = await extract_edit_data(message.text)
    if not any(value is not None for value in changes.values()):
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
        return

    # –®–∞–≥ 2: –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–Ω–∞–∑–≤–∞–Ω–∏—é, –¥–∞—Ç–µ –∏ —Ç.–ø.)
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    deletion_like_data = await extract_event_to_delete(message.text)

    if not deletion_like_data["start_date"] and not changes.get("start_datetime"):
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å.")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
        return

    try:
        user_res = supabase_client.table("users") \
            .select("id") \
            .eq("telegram_id", str(message.from_user.id)) \
            .execute()

        if not user_res:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = user_res.data[0]["id"]

        # –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏—è
        query = supabase_client.table("events") \
            .select("*") \
            .eq("user_id", user_id)

        found_event = None

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è + –¥–∞—Ç–∞ ‚Äî –∏—â–µ–º –ø–æ –Ω–∏–º
        if deletion_like_data["start_date"] and deletion_like_data["exact_time"]:
            target_dt = f"{deletion_like_data['start_date']}T{deletion_like_data['exact_time']}:00"
            query = query.eq("start_datetime", target_dt)
            res = query.execute()
            if res:
                found_event = res.data[0]

        # –ò–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        elif deletion_like_data["event_title"]:
            res = query.ilike("event_title", f"%{deletion_like_data['event_title']}%").execute()
            if res:
                found_event = res.data[0]

        # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
        else:
            res = query.order("start_datetime", desc=True).limit(1).execute()
            if res.data and len(res.data) > 0:
                found_event = res.data[0]
            else:
                found_event = None

        if not found_event:
            await message.reply("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
            return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        updated_fields = {}
        old_values = {}

        for field in ["event_title", "event_description", "event_place"]:
            new_val = changes.get(field)
            if new_val:
                old_values[field] = found_event[field]
                updated_fields[field] = new_val

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if changes["start_datetime"]:
            old_values["start_datetime"] = found_event["start_datetime"]
            updated_fields["start_datetime"] = changes["start_datetime"]

        if changes["end_datetime"]:
            old_values["end_datetime"] = found_event["end_datetime"]
            updated_fields["end_datetime"] = changes["end_datetime"]

        if not updated_fields:
            await message.reply("‚ùå –ù–µ—á–µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å.")
            await state.clear()
            await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        details = ""
        for key, new_val in updated_fields.items():
            old_val = old_values.get(key, "–Ω–µ –∑–∞–¥–∞–Ω–æ")
            if key == "start_datetime":
                old_val = old_val.split("T")[1][:5] if old_val else "??:??"
                new_val_time = new_val.split("T")[1][:5] if "T" in new_val else new_val
                details += f"üïê –í—Ä–µ–º—è: {old_val} ‚Üí {new_val_time}\n"
            elif key == "event_title":
                details += f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {old_val} ‚Üí {new_val}\n"
            elif key == "event_place":
                details += f"üìç –ú–µ—Å—Ç–æ: {old_val or '–Ω–µ –∑–∞–¥–∞–Ω–æ'} ‚Üí {new_val}\n"
            elif key == "event_description":
                details += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {old_val or '–Ω–µ –∑–∞–¥–∞–Ω–æ'} ‚Üí {new_val}\n"

        confirmation_msg = (
            f"–ë—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ:\n\n"
            f"–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"‚Ä¢ <b>{found_event['event_title']}</b>"
            f" ‚Äî {found_event['start_datetime'].split('T')[1][:5] if found_event['start_datetime'] else '??:??'}\n\n"
            f"–ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            f"{details}\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:"
        )

        await message.reply(confirmation_msg, parse_mode="HTML", reply_markup=confirm_kb)
        await state.update_data(event_id=found_event["id"], updated_fields=updated_fields)
        await state.set_state(EventForm.confirming_edit)

    except Exception as e:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏—è.")
        print(f"–û—à–∏–±–∫–∞: {e}")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)

# --- –•–µ–Ω–¥–ª–µ—Ä: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
@dp.message(EventForm.confirming_edit, F.text)
async def confirm_edit(message: Message, state: FSMContext):
    if message.text == "‚ùå –ù–µ—Ç":
        await message.reply("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        await state.clear()
        return

    elif message.text == "‚úÖ –î–∞":
        data = await state.get_data()
        event_id = data.get("event_id")
        updated_fields = data.get("updated_fields", {})

        try:
            supabase_client.table("events").update(updated_fields).eq("id", event_id).execute()
            await message.reply("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=main_menu)
        except Exception as e:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            print(f"–û—à–∏–±–∫–∞: {e}")

        await state.clear()
        return

    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


