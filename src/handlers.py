from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from datetime import datetime

from config import supabase_client
from keyboards import main_menu, confirm_kb, exit_add_kb
from states import EventForm
from utils import extract_event_data, extract_date_range, extract_event_to_delete, extract_edit_data


def clean_null_values(data):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ 'null' –≤ Python None"""
    cleaned = {}
    for key, value in data.items():
        if value == "null" or value == "" or value is None:
            cleaned[key] = None
        else:
            cleaned[key] = value
    return cleaned


# --- –•–µ–Ω–¥–ª–µ—Ä: —Å—Ç–∞—Ä—Ç –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async def cmd_start(message: Message):
    # –£–±–∏—Ä–∞–µ–º –ª—é–±—É—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ Telegram!\n\n"

        "üìå –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å, –ø–æ–∫–∞–∑–∞—Ç—å) –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ,"
        "–∫–∞–∫ –±—É–¥—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n"

        "‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ üìÖ <b>–î–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b> ‚Äî –Ω–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:\n"
        "  <code>–ó–∞–≤—Ç—Ä–∞ –≤ 18:00 –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ Zoom</code>\n"
        "‚Ä¢ üóìÔ∏è <b>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b> ‚Äî —Å–ø—Ä–æ—Å–∏:\n"
        "  <code>–ö–∞–∫–∏–µ —É –º–µ–Ω—è –¥–µ–ª–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?</code>\n"
        "‚Ä¢ ‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</b> ‚Äî —Å–∫–∞–∂–∏:\n"
        "  <code>–ü–µ—Ä–µ–Ω–µ—Å–∏ –≤—Å—Ç—Ä–µ—á—É –Ω–∞ 19:00</code>\n"
        "‚Ä¢ üóëÔ∏è <b>–£–¥–∞–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b> ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:\n"
        "  <code>–£–¥–∞–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤ –ø—è—Ç–Ω–∏—Ü—É</code>\n\n"

        "üéØ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        parse_mode="HTML",
        reply_markup=main_menu
    )


# --- –•–µ–Ω–¥–ª–µ—Ä: "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ" ---
async def add_event_handler(message: Message, state: FSMContext):
    await state.set_state(EventForm.waiting_for_event)
    await message.answer("–ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –∞ —Ç–∞–∫–∂–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤—Ç—å –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é):", reply_markup=None)


# --- –•–µ–Ω–¥–ª–µ—Ä: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è" ---
async def view_events_handler(message: Message, state: FSMContext):
    await state.set_state(EventForm.waiting_for_period)
    await message.answer("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∏–ª–∏ –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è?", reply_markup=None)


# --- –•–µ–Ω–¥–ª–µ—Ä: –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è ---
async def exit_add_event_mode(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)


# --- –•–µ–Ω–¥–ª–µ—Ä: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
async def handle_new_event(message: Message, state: FSMContext):
    await message.reply("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–±—ã—Ç–∏–µ...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    state_data = await state.get_data()
    saved_event = state_data.get("partial_event", {})

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    extracted = await extract_event_data(message.text)
    
    # –û—á–∏—â–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
    extracted = clean_null_values(extracted)
    saved_event = clean_null_values(saved_event)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏ (–Ω–æ–≤—ã–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    merged_event = {
        "event_title": extracted["event_title"] or saved_event.get("event_title"),
        "event_description": extracted["event_description"] or saved_event.get("event_description"),
        "start_datetime": extracted["start_datetime"] or saved_event.get("start_datetime"),
        "end_datetime": extracted["end_datetime"] or saved_event.get("end_datetime"),
        "event_place": extracted["event_place"] or saved_event.get("event_place")
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    missing_title = not merged_event["event_title"]
    missing_datetime = not merged_event["start_datetime"]

    if missing_title or missing_datetime:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(partial_event=merged_event)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        collected_info = ""
        has_collected_data = False
        
        if merged_event["event_title"]:
            collected_info += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{merged_event['event_title']}</b>\n"
            has_collected_data = True
        if merged_event["start_datetime"]:
            collected_info += f"‚Ä¢ –î–∞—Ç–∞/–≤—Ä–µ–º—è: <b>{merged_event['start_datetime']}</b>\n"
            has_collected_data = True
        if merged_event["event_place"]:
            collected_info += f"‚Ä¢ –ú–µ—Å—Ç–æ: <b>{merged_event['event_place']}</b>\n"
            has_collected_data = True
        if merged_event["event_description"]:
            collected_info += f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: <b>{merged_event['event_description']}</b>\n"
            has_collected_data = True
        
        if has_collected_data:
            collected_info = "üìù –£–∂–µ —Å–æ–±—Ä–∞–Ω–æ:\n" + collected_info
        
        if missing_title and missing_datetime:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞.\n\n"
            if has_collected_data:
                error_msg += collected_info + "\n"
            error_msg += "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
        elif missing_title:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.\n\n"
            if has_collected_data:
                error_msg += collected_info + "\n"
            error_msg += "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
        elif missing_datetime:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞.\n\n"
            if has_collected_data:
                error_msg += collected_info + "\n"
            error_msg += "üîç –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
        
        await message.reply(error_msg, parse_mode="HTML", reply_markup=exit_add_kb)
        return

    # –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    extracted = clean_null_values(merged_event)

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_res = supabase_client.table("users") \
            .select("id") \
            .eq("telegram_id", str(message.from_user.id)) \
            .execute()

        user_id = user_res.data[0]["id"] if user_res.data else None

        if not user_id:
            new_user = supabase_client.table("users") \
                .insert({"telegram_id": str(message.from_user.id)}) \
                .execute()
            user_id = new_user.data[0]["id"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        event_data = {
            "user_id": user_id,
            "event_title": extracted["event_title"],
            "event_description": extracted["event_description"],
            "start_datetime": extracted["start_datetime"],
            "end_datetime": extracted["end_datetime"],
            "event_place": extracted["event_place"],
            "event_weekly": False
        }

        supabase_client.table("events").insert(event_data).execute()

        await message.reply(
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:\n\n"
            f"<b>{extracted['event_title']}</b>\n"
            f"üïê {extracted['start_datetime']}\n"
            f"{'üìç ' + extracted['event_place'] if extracted['event_place'] else ''}\n"
            f"{'üìù ' + extracted['event_description'] if extracted['event_description'] else ''}",
            parse_mode="HTML"
        )

    except Exception as e:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        await state.update_data(partial_event=extracted)
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.", reply_markup=exit_add_kb)
        print(f"–û—à–∏–±–∫–∞: {e}")
        return

    await state.clear()
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)


# --- –•–µ–Ω–¥–ª–µ—Ä: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π ---
async def handle_view_events(message: Message, state: FSMContext):
    await message.reply("üîç –û–ø—Ä–µ–¥–µ–ª—è—é –ø–µ—Ä–∏–æ–¥ –∏ –≤—Ä–µ–º—è...")

    range_data = await extract_date_range(message.text)

    if not range_data["start_date"] and not range_data["end_date"]:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É.")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    start_date = range_data["start_date"] or range_data["end_date"]
    end_date = range_data["end_date"] or range_data["start_date"]

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_res = supabase_client.table("users") \
            .select("id") \
            .eq("telegram_id", str(message.from_user.id)) \
            .execute()

        if not user_res:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = user_res.data[0]["id"]

        # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        query = supabase_client.table("events") \
            .select("*") \
            .eq("user_id", user_id) \
            .gte("start_datetime", f"{start_date}T00:00:00") \
            .lte("start_datetime", f"{end_date}T23:59:59")

        # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if range_data["exact_time"]:
            # –¢–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
            query = query.eq("start_datetime", f"{start_date}T{range_data['exact_time']}:00")

        else:
            # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
            if range_data["start_time"]:
                time_str = f"{start_date}T{range_data['start_time']}:00"
                query = query.gte("start_datetime", time_str)

            if range_data["end_time"]:
                time_str = f"{end_date}T{range_data['end_time']}:00"
                query = query.lte("start_datetime", time_str)

        events_res = query.order("start_datetime").execute()

        if not events_res.data or len(events_res.data) == 0:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
            if range_data["exact_time"]:
                await message.reply(f"–ù–∞ {start_date} –≤ {range_data['exact_time']} –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            else:
                await message.reply(f"–ù–∞ {start_date} –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            response = f"üìÖ –°–æ–±—ã—Ç–∏—è "
            if range_data["exact_time"]:
                response += f"–Ω–∞ {start_date} –≤ {range_data['exact_time']}:\n\n"
            elif range_data["start_time"] and not range_data["end_time"]:
                response += f"–ø–æ—Å–ª–µ {range_data['start_time']} –Ω–∞ {start_date}:\n\n"
            elif range_data["end_time"] and not range_data["start_time"]:
                response += f"–¥–æ {range_data['end_time']} –Ω–∞ {start_date}:\n\n"
            else:
                response += f"—Å {start_date} –ø–æ {end_date}:\n\n"

            for ev in events_res.data:
                title = ev["event_title"]

                if ev["start_datetime"]:
                    dt = ev["start_datetime"]
                    date_part = dt.split("T")[0]
                    time_part = dt.split("T")[1][:5]
                    try:
                        from datetime import datetime as dt_module
                        parsed = dt_module.fromisoformat(date_part)
                        formatted_date = parsed.strftime("%d.%m.%Y")
                        datetime_display = f"{formatted_date} {time_part}"
                    except:
                        datetime_display = f"{date_part} {time_part}"
                else:
                    datetime_display = "??.??.???? ??:??"

                place = f"\nüìç {ev['event_place']}" if ev["event_place"] else ""
                desc = f"\nüìù {ev['event_description']}" if ev["event_description"] else ""

                response += (
                    f"‚Ä¢ <b>{title}</b> ‚Äî {datetime_display}{place}{desc}\n\n"
                )

            await message.reply(response.strip(), parse_mode="HTML")

    except Exception as e:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π.")
        print(f"–û—à–∏–±–∫–∞: {e}")

    await state.clear()
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)


# --- –•–µ–Ω–¥–ª–µ—Ä: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---
async def delete_event_handler(message: Message, state: FSMContext):
    await state.set_state(EventForm.waiting_for_delete)
    await message.answer(
        "–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å?\n"
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏ –¥–∞—Ç—É.",
        reply_markup=None
    )


# --- –•–µ–Ω–¥–ª–µ—Ä: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ ---
async def handle_delete_event(message: Message, state: FSMContext):
    await message.reply("üîç –ò—â—É —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    deletion_data = await extract_event_to_delete(message.text)

    if not deletion_data["start_date"]:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è.")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_res = supabase_client.table("users") \
            .select("id") \
            .eq("telegram_id", str(message.from_user.id)) \
            .execute()

        if not user_res:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = user_res.data[0]["id"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        query = supabase_client.table("events") \
            .select("*") \
            .eq("user_id", user_id) \
            .gte("start_datetime", f"{deletion_data['start_date']}T00:00:00") \
            .lte("start_datetime", f"{deletion_data['start_date']}T23:59:59")

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
        if deletion_data["exact_time"]:
            target_time = f"{deletion_data['start_date']}T{deletion_data['exact_time']}:00"
            query = query.eq("start_datetime", target_time)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–µ–º—É
        if deletion_data["event_title"]:
            query = query.ilike("event_title", f"%{deletion_data['event_title']}%")

        events_res = query.execute()

        if not events_res:
            await message.reply(f"‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–∞ {deletion_data['start_date']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏–π
        found_events = events_res.data
        event_ids = [ev["id"] for ev in found_events]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        first_ev = found_events[0]
        title = first_ev["event_title"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        if first_ev["start_datetime"]:
            dt = first_ev["start_datetime"]
            date_part = dt.split("T")[0]
            time_part = dt.split("T")[1][:5]
            try:
                from datetime import datetime as dt_module
                parsed = dt_module.fromisoformat(date_part)
                formatted_date = parsed.strftime("%d.%m.%Y")
                datetime_str = f"{formatted_date} {time_part}"
            except:
                datetime_str = f"{date_part} {time_part}"
        else:
            datetime_str = "??.??.???? ??:??"

        place = f"\nüìç {first_ev['event_place']}" if first_ev['event_place'] else ""
        desc = f"\nüìù {first_ev['event_description']}" if first_ev['event_description'] else ""

        confirmation_msg = (
            f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:\n\n"
            f"‚Ä¢ <b>{title}</b> ‚Äî {datetime_str}{place}{desc}\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å?"
        )
        await message.reply(confirmation_msg, parse_mode="HTML", reply_markup=confirm_kb)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(event_ids_to_delete=event_ids)
        await state.set_state(EventForm.confirming_delete)

    except Exception as e:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏—è.")
        print(f"–û—à–∏–±–∫–∞: {e}")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)


# --- –•–µ–Ω–¥–ª–µ—Ä: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ---
async def confirm_delete(message: Message, state: FSMContext):
    if message.text == "‚ùå –ù–µ—Ç":
        await message.reply("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        await state.clear()
        return

    elif message.text == "‚úÖ –î–∞":
        data = await state.get_data()
        event_ids = data.get("event_ids_to_delete", [])

        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
            supabase_client.table("events").delete().in_("id", event_ids).execute()
            count = len(event_ids)
            s = "—Å–æ–±—ã—Ç–∏–µ" if count == 1 else "—Å–æ–±—ã—Ç–∏—è"
            await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {count} {s}.", reply_markup=main_menu)
        except Exception as e:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
            print(f"–û—à–∏–±–∫–∞: {e}")

        await state.clear()
        return

    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç")


# --- –•–µ–Ω–¥–ª–µ—Ä: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---
async def edit_event_handler(message: Message, state: FSMContext):
    await state.set_state(EventForm.waiting_for_edit)
    await message.answer(
        "–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å–∏ –≤—Å—Ç—Ä–µ—á—É —Å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 19:00\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ '–î–µ–º–æ –ø—Ä–æ–¥—É–∫—Ç–∞'\n"
        "‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å–∏ —Å–æ–∑–≤–æ–Ω –≤ Zoom",
        reply_markup=None
    )


# --- –•–µ–Ω–¥–ª–µ—Ä: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ---
async def handle_edit_event(message: Message, state: FSMContext):
    await message.reply("üîç –ò—â—É —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è...")

    # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á—å, –ß–¢–û –º–µ–Ω—è—Ç—å
    changes = await extract_edit_data(message.text)
    if not any(value is not None for value in changes.values()):
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
        return

    # –®–∞–≥ 2: –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–Ω–∞–∑–≤–∞–Ω–∏—é, –¥–∞—Ç–µ –∏ —Ç.–ø.)
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    deletion_like_data = await extract_event_to_delete(message.text)

    if not deletion_like_data["start_date"] and not changes.get("start_datetime"):
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–∏—Ç—å.")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
        return

    try:
        user_res = supabase_client.table("users") \
            .select("id") \
            .eq("telegram_id", str(message.from_user.id)) \
            .execute()

        if not user_res:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = user_res.data[0]["id"]

        # –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏—è
        query = supabase_client.table("events") \
            .select("*") \
            .eq("user_id", user_id)

        found_event = None

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è + –¥–∞—Ç–∞ ‚Äî –∏—â–µ–º –ø–æ –Ω–∏–º
        if deletion_like_data["start_date"] and deletion_like_data["exact_time"]:
            target_dt = f"{deletion_like_data['start_date']}T{deletion_like_data['exact_time']}:00"
            query = query.eq("start_datetime", target_dt)
            res = query.execute()
            if res:
                found_event = res.data[0]

        # –ò–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        elif deletion_like_data["event_title"]:
            res = query.ilike("event_title", f"%{deletion_like_data['event_title']}%").execute()
            if res:
                found_event = res.data[0]

        # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
        else:
            res = query.order("start_datetime", desc=True).limit(1).execute()
            if res.data and len(res.data) > 0:
                found_event = res.data[0]
            else:
                found_event = None

        if not found_event:
            await message.reply("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
            return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        updated_fields = {}
        old_values = {}

        for field in ["event_title", "event_description", "event_place"]:
            new_val = changes.get(field)
            if new_val:
                old_values[field] = found_event[field]
                updated_fields[field] = new_val

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if changes["start_datetime"]:
            old_values["start_datetime"] = found_event["start_datetime"]
            updated_fields["start_datetime"] = changes["start_datetime"]

        if changes["end_datetime"]:
            old_values["end_datetime"] = found_event["end_datetime"]
            updated_fields["end_datetime"] = changes["end_datetime"]

        if not updated_fields:
            await message.reply("‚ùå –ù–µ—á–µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å.")
            await state.clear()
            await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        details = ""
        for key, new_val in updated_fields.items():
            old_val = old_values.get(key, "–Ω–µ –∑–∞–¥–∞–Ω–æ")
            if key == "start_datetime":
                old_val = old_val.split("T")[1][:5] if old_val else "??:??"
                new_val_time = new_val.split("T")[1][:5] if "T" in new_val else new_val
                details += f"üïê –í—Ä–µ–º—è: {old_val} ‚Üí {new_val_time}\n"
            elif key == "event_title":
                details += f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {old_val} ‚Üí {new_val}\n"
            elif key == "event_place":
                details += f"üìç –ú–µ—Å—Ç–æ: {old_val or '–Ω–µ –∑–∞–¥–∞–Ω–æ'} ‚Üí {new_val}\n"
            elif key == "event_description":
                details += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {old_val or '–Ω–µ –∑–∞–¥–∞–Ω–æ'} ‚Üí {new_val}\n"

        confirmation_msg = (
            f"–ë—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ:\n\n"
            f"–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"‚Ä¢ <b>{found_event['event_title']}</b>"
            f" ‚Äî {found_event['start_datetime'].split('T')[1][:5] if found_event['start_datetime'] else '??:??'}\n\n"
            f"–ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            f"{details}\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:"
        )

        await message.reply(confirmation_msg, parse_mode="HTML", reply_markup=confirm_kb)
        await state.update_data(event_id=found_event["id"], updated_fields=updated_fields)
        await state.set_state(EventForm.confirming_edit)

    except Exception as e:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏—è.")
        print(f"–û—à–∏–±–∫–∞: {e}")
        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)


# --- –•–µ–Ω–¥–ª–µ—Ä: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
async def confirm_edit(message: Message, state: FSMContext):
    if message.text == "‚ùå –ù–µ—Ç":
        await message.reply("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        await state.clear()
        return

    elif message.text == "‚úÖ –î–∞":
        data = await state.get_data()
        event_id = data.get("event_id")
        updated_fields = data.get("updated_fields", {})

        try:
            supabase_client.table("events").update(updated_fields).eq("id", event_id).execute()
            await message.reply("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=main_menu)
        except Exception as e:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            print(f"–û—à–∏–±–∫–∞: {e}")

        await state.clear()
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
        return

    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç")

